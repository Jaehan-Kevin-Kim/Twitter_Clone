{"version":3,"sources":["fBase.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","e","preventDefault","target","name","value","onSubmit","a","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","event","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Tweet","tweetObj","isOwner","editing","setEditing","text","newTweet","setNewTweet","onDeleteClick","ok","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","autoFocus","src","faTrash","faPencilAlt","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","onFileChange","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","maxLength","for","faPlus","accept","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","onSnapshot","snapshot","tweetArray","docs","map","marginTop","Navigation","to","faUser","displayName","Profile","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","updateProfile","signOut","push","AppRouter","isLoggedIn","exact","path","App","init","setInit","setIsLoggedIn","setUserObj","onAuthStateChanged","user","args","currentUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dedc6530.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();\r\n","import { authService } from 'fBase';\r\nimport React, { useState } from 'react';\r\n\r\nconst AuthForm = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  const onChange = (e) => {\r\n    e.preventDefault();\r\n    // console.log(e.target.name);\r\n    const {\r\n      target: { name, value },\r\n    } = e;\r\n    if (name === 'email') {\r\n      setEmail(value);\r\n    } else if (name === 'password') {\r\n      setPassword(value);\r\n    }\r\n  };\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      let data;\r\n      if (newAccount) {\r\n        //create account\r\n        data = await authService.createUserWithEmailAndPassword(\r\n          email,\r\n          password\r\n        );\r\n      } else {\r\n        // log in\r\n        data = await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n      console.log(data);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const toggleAccount = () => {\r\n    setNewAccount((prev) => !prev);\r\n  };\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit} className='container'>\r\n        <input\r\n          name='email'\r\n          type='email'\r\n          placeholder='Email'\r\n          value={email}\r\n          onChange={onChange}\r\n          className='authInput'\r\n          required\r\n        />\r\n        <input\r\n          name='password'\r\n          type='password'\r\n          placeholder='Password'\r\n          value={password}\r\n          onChange={onChange}\r\n          className='authInput'\r\n          required\r\n        />\r\n        <input\r\n          type='submit'\r\n          value={newAccount ? 'Create Account' : 'Sign In'}\r\n          className='authInput authSubmit'\r\n        />\r\n        {error && <span className='authError'>{error}</span>}\r\n      </form>\r\n      <span onClick={toggleAccount} className='authSwitch'>\r\n        {newAccount ? 'Sign in' : 'Create Account'}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import React from 'react';\r\nimport { authService, firebaseInstance } from 'fBase';\r\nimport AuthForm from 'components/AuthForm';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst Auth = () => {\r\n  const onSocialClick = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n    let provider;\r\n    if (name === 'google') {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === 'github') {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    const data = await authService.signInWithPopup(provider);\r\n    console.log(data);\r\n  };\r\n\r\n  return (\r\n    <div className='authContainer'>\r\n      <FontAwesomeIcon\r\n        icon={faTwitter}\r\n        color={'#04AAFF'}\r\n        size='3x'\r\n        style={{ marginBottom: 30 }}\r\n      />\r\n      <AuthForm />\r\n      <div className='authBtns'>\r\n        <button onClick={onSocialClick} name='google' className='authBtn'>\r\n          Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n        </button>\r\n        <button onClick={onSocialClick} name='github' className='authBtn'>\r\n          Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import { dbService, storageService } from 'fBase';\r\nimport React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash, faPencilAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Tweet = ({ tweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const [newTweet, setNewTweet] = useState(tweetObj.text);\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm('Are you sure you want to delete this tweet?');\r\n    console.log(ok);\r\n    if (ok) {\r\n      //delete tweet\r\n      await dbService.doc(`tweets/${tweetObj.id}`).delete();\r\n      await storageService.refFromURL(tweetObj.attachmentUrl).delete();\r\n    }\r\n  };\r\n\r\n  const toggleEditing = () => {\r\n    setEditing((prev) => !prev);\r\n    console.log(editing);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(tweetObj, newTweet);\r\n    await dbService.doc(`tweets/${tweetObj.id}`).update({\r\n      text: newTweet,\r\n    });\r\n    setEditing(false);\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewTweet(value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className='tweet'>\r\n        {editing ? (\r\n          <>\r\n            <form onSubmit={onSubmit} className='container tweetEdit'>\r\n              <input\r\n                type='text'\r\n                placeholder='Edit your tweet'\r\n                value={newTweet}\r\n                required\r\n                autoFocus\r\n                onChange={onChange}\r\n                className='formInput'\r\n              />\r\n              <input type='submit' value='Update Tweet' className='formBtn' />\r\n            </form>\r\n            <button onClick={toggleEditing} className='formBtn cancelBtn'>\r\n              Cancel\r\n            </button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <h4>{tweetObj.text}</h4>\r\n\r\n            {tweetObj.attachmentUrl && <img src={tweetObj.attachmentUrl} />}\r\n            {isOwner && (\r\n              <>\r\n                <div className='tweet__actions'>\r\n                  <span onClick={onDeleteClick}>\r\n                    <FontAwesomeIcon icon={faTrash} />\r\n                  </span>\r\n                  <span onClick={toggleEditing}>\r\n                    <FontAwesomeIcon icon={faPencilAlt} />\r\n                  </span>\r\n                </div>\r\n              </>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Tweet;\r\n","import { dbService, storageService } from 'fBase';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst TweetFactory = ({ userObj }) => {\r\n  const [tweet, setTweet] = useState('');\r\n  const [attachment, setAttachment] = useState('');\r\n  const onSubmit = async (event) => {\r\n    if (tweet === '') {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    let attachmentUrl = '';\r\n\r\n    if (attachment !== '') {\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`);\r\n      const response = await attachmentRef.putString(attachment, 'data_url');\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n    const tweetObj = {\r\n      text: tweet,\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      attachmentUrl,\r\n    };\r\n    await dbService.collection('tweets').add(tweetObj);\r\n    setTweet('');\r\n    setAttachment('');\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setTweet(value);\r\n  };\r\n\r\n  // console.log(tweets);\r\n\r\n  const onFileChange = (event) => {\r\n    // console.log(event.target.files);\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    // console.log(files);\r\n    const theFile = files[0];\r\n    // console.log(theFile);\r\n    const reader = new FileReader();\r\n    reader.onloadend = (finishedEvent) => {\r\n      console.log(finishedEvent);\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n    reader.readAsDataURL(theFile);\r\n  };\r\n\r\n  const onClearAttachment = () => {\r\n    setAttachment('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit} className='factoryForm'>\r\n      <div className='factoryInput__container'>\r\n        <input\r\n          className='factoryInput__input'\r\n          value={tweet}\r\n          onChange={onChange}\r\n          type='text'\r\n          placeholder=\"What's on your mind?\"\r\n          maxLength={120}\r\n        />\r\n        <input type='submit' value='&rarr;' className='factoryInput__arrow' />\r\n      </div>\r\n      <label for='attach-file' className='factoryInput__label'>\r\n        <span>Add photos</span>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </label>\r\n\r\n      <input\r\n        id='attach-file'\r\n        type='file'\r\n        accept='image/*'\r\n        onChange={onFileChange}\r\n        style={{\r\n          opacity: 0,\r\n        }}\r\n      />\r\n      <input type='file' accept='image/*' onChange={onFileChange} />\r\n      <input type='submit' value='Tweet' />\r\n      {attachment && (\r\n        <div className='factoryForm__attachment'>\r\n          <img\r\n            src={attachment}\r\n            style={{\r\n              backgroundImage: attachment,\r\n            }}\r\n          />\r\n          <div className='factoryForm__clear' onClick={onClearAttachment}>\r\n            <span>Remove</span>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TweetFactory;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport Tweet from 'components/Tweet';\r\nimport { dbService } from 'fBase';\r\nimport TweetFactory from 'components/TweetFactory';\r\n\r\nconst Home = ({ userObj }) => {\r\n  // console.log(userObj);\r\n\r\n  const [tweets, setTweets] = useState([]);\r\n\r\n  // const getTweets = async () => {\r\n  //   const dbTweets = await dbService.collection('tweets').get();\r\n  //   // console.log(dbTweets);\r\n  //   // dbTweets.forEach((document) => console.log(document.data()));\r\n  //   dbTweets.forEach((document) => {\r\n  //     const tweetObject = {\r\n  //       ...document.data(),\r\n  //       id: document.id,\r\n  //     };\r\n  //     setTweets((prev) => [tweetObject, ...prev]);\r\n  //   });\r\n  // };\r\n\r\n  useEffect(() => {\r\n    // getTweets();\r\n\r\n    //아래 처럼 하거나 아니면 위에 것 처럼 하면 됨.\r\n    dbService.collection('tweets').onSnapshot((snapshot) => {\r\n      const tweetArray = snapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      // console.log(tweetArray);\r\n      setTweets(tweetArray);\r\n\r\n      // console.log(snapshot.docs);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className='container'>\r\n      <TweetFactory userObj={userObj} />\r\n      <div style={{ marginTop: 30 }}>\r\n        {tweets.map((tweet) => (\r\n          <Tweet\r\n            key={tweet.id}\r\n            tweetObj={tweet}\r\n            isOwner={tweet.creatorId === userObj.uid}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Home;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Navigation = ({ userObj }) => (\r\n  <nav>\r\n    <ul className='nav__list'>\r\n      <li>\r\n        {/* <Link to='/'>Home</Link> */}\r\n        <Link to='/' className='nav__link__home'>\r\n          <FontAwesomeIcon icon={faTwitter} color={'#04AAFF'} size='2x' />\r\n        </Link>\r\n      </li>\r\n      <li>\r\n        {/* <Link to='/profile'>{userObj.displayName}'s Profile</Link> */}\r\n        <Link to='/profile' className='nav__link__profile'>\r\n          <FontAwesomeIcon icon={faUser} color={'#04AAFF'} size='2x' />\r\n          <span>\r\n            {userObj.displayName\r\n              ? `${userObj.displayName}'s Profile`\r\n              : 'Profile'}\r\n          </span>\r\n        </Link>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n);\r\nexport default Navigation;\r\n","import { authService, dbService } from 'fBase';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Profile = ({ refreshUser, userObj }) => {\r\n  let history = useHistory();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    history.push('/');\r\n  };\r\n\r\n  // const getMyTweets = async () => {\r\n  //   //filter링 하는법 (profile화면에 해당 log in 한 user 정보를 표시하기 위해 해당 log in한 user가 맞는지 확인 해주는 기능)\r\n  //   const tweets = await dbService\r\n  //     .collection('tweets')\r\n  //     .where('creatorId', '==', userObj.uid)\r\n  //     .orderBy('createdAt')\r\n  //     .get();\r\n\r\n  //   console.log(tweets.docs.map((doc) => doc.data()));\r\n  // };\r\n  // useEffect(() => {\r\n  //   getMyTweets();\r\n  // }, []);\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      // console.log(userObj.updateProfile);\r\n      console.log(newDisplayName);\r\n      await userObj.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n      refreshUser();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='container'>\r\n      <form onSubmit={onSubmit} className='profileForm'>\r\n        <input\r\n          onChange={onChange}\r\n          type='text'\r\n          autoFocus\r\n          placeholder='Display Name'\r\n          value={newDisplayName}\r\n          className='formInput'\r\n        />\r\n        <input\r\n          type='submit'\r\n          value='Update Profile'\r\n          className='formBtn'\r\n          style={{\r\n            marginTop: 10,\r\n          }}\r\n        />\r\n      </form>\r\n      <span className='formBtn cancelBtn logOut' onClick={onLogOutClick}>\r\n        Log Out\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport {\r\n  HashRouter as Router,\r\n  // Redirect,\r\n  Route,\r\n  Switch,\r\n} from 'react-router-dom';\r\nimport Auth from '../routes/Auth';\r\nimport Home from '../routes/Home';\r\nimport Navigation from '../components/Navigation';\r\nimport Profile from 'routes/Profile';\r\n\r\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\r\n  return (\r\n    <Router>\r\n      {isLoggedIn && <Navigation userObj={userObj} />}\r\n      <Switch>\r\n        {isLoggedIn ? (\r\n          <div className='router'>\r\n            <Route exact path='/'>\r\n              <Home userObj={userObj} />\r\n            </Route>\r\n            <Route exact path='/profile'>\r\n              <Profile userObj={userObj} refreshUser={refreshUser} />\r\n            </Route>\r\n            {/* <Redirect from='*' to='/'></Redirect> */}\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <Route exact path='/'>\r\n              <Auth />\r\n            </Route>\r\n            {/* <Redirect from='*' to='/'></Redirect> */}\r\n          </>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React, { useState, useEffect } from 'react';\nimport AppRouter from 'components/Router';\nimport { authService } from 'fBase';\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setIsLoggedIn(true);\n        /* setUserObj(user); */\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setIsLoggedIn(false);\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    // setUserObj(authService.currentUser);\n    // console.log(authService.currentUser);\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n    /*  setUserObj(Object.assign({}, user)); */\n  };\n\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={isLoggedIn}\n          userObj={userObj}\n        />\n      ) : (\n        'Initializing...'\n      )}\n      {/* <footer>&copy; Kevin Kim {new Date().getFullYear()}</footer> */}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './styles.css';\n// import firebase from './fBase';\n// console.log(firebase);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}